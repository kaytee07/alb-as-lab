AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Auto Scaling Lab: Deploys a VPC, public/private subnets, NAT Gateway, ALB, and an Auto Scaling Group
  with a CPU-based scaling policy. EC2 instances run a web server that displays instance info and has
  a stress test button.

Parameters:
  InstanceType:
    Description: EC2 instance type for the web servers.
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3.small
    ConstraintDescription: Must be a valid EC2 instance type.

Resources:
  #------------------------------------------------------------------
  #  VPC and Networking
  #------------------------------------------------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet-2

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NAT-Gateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-RT

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-RT

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  #------------------------------------------------------------------
  #  Security Groups
  #------------------------------------------------------------------
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-alb-sg
      GroupDescription: "Enable HTTP access for the ALB"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-ec2-sg
      GroupDescription: "Enable HTTP access from the ALB only"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  #------------------------------------------------------------------
  #  Application Load Balancer (ALB)
  #------------------------------------------------------------------
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-alb
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing

  MyALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-tg
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'

  MyALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyALBTargetGroup

  #------------------------------------------------------------------
  #  EC2 Launch Template and Auto Scaling Group
  #------------------------------------------------------------------
  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        ImageId: '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}'
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd stress
            systemctl start httpd
            systemctl enable httpd
            
            # Enable CGI module to run shell scripts
            echo "ScriptAlias /cgi-bin/ /var/www/cgi-bin/" > /etc/httpd/conf.d/cgi.conf
            mkdir -p /var/www/cgi-bin
            
            # Create the CGI script for the stress test
            cat <<'EOF' > /var/www/cgi-bin/stress.sh
            #!/bin/bash
            echo "Content-Type: text/plain"
            echo ""
            echo "Starting CPU stress test for 120 seconds..."
            stress --cpu 1 --timeout 120 &
            EOF
            chmod +x /var/www/cgi-bin/stress.sh
            
            # Fetch instance metadata
            INSTANCE_ID=$(curl -s http://169.254.169.24/latest/meta-data/instance-id)
            IP_ADDRESS=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
            
            # Create the index.html file with dynamic content
            cat <<EOF > /var/www/html/index.html
            <!DOCTYPE html>
            <html>
            <head>
                <title>Auto Scaling Test</title>
                <style>
                    body { font-family: Arial, sans-serif; text-align: center; margin-top: 50px; background-color: #232F3E; color: #FFFFFF; }
                    .container { background-color: #1A2433; padding: 40px; border-radius: 10px; display: inline-block; box-shadow: 0 4px 8px rgba(0,0,0,0.3); }
                    h1 { color: #FF9900; }
                    button { padding: 15px 30px; font-size: 18px; cursor: pointer; background-color: #FF9900; color: #1A2433; border: none; border-radius: 5px; transition: background-color 0.3s; }
                    button:hover { background-color: #FFAA33; }
                    #status { margin-top: 20px; font-size: 16px; color: #CCCCCC; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>Hello from Instance</h1>
                    <p style="font-size: 20px;"><b>IP Address:</b> ${IP_ADDRESS}</p>
                    <p style="font-size: 20px;"><b>Instance ID:</b> ${INSTANCE_ID}</p>
                    <br/>
                    <button onclick="runStress()">Stress CPU for 120 Seconds</button>
                    <p id="status"></p>
                </div>
                <script>
                    function runStress() {
                        const statusEl = document.getElementById('status');
                        statusEl.innerText = 'Stress test started! Monitor the Auto Scaling Group activity in the AWS Console.';
                        fetch('/cgi-bin/stress.sh')
                            .then(response => response.text())
                            .then(data => {
                                console.log(data);
                                statusEl.innerText = 'Stress command sent. The instance CPU will be high for 2 minutes.';
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                statusEl.innerText = 'Failed to start stress test.';
                            });
                    }
                </script>
            </body>
            </html>
            EOF
            
            systemctl restart httpd

  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '4'
      DesiredCapacity: '1'
      TargetGroupARNs:
        - !Ref MyALBTargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ASG-Instance
          PropagateAtLaunch: true

  MyScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref MyAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 30.0 # Trigger scale-out when CPU utilization exceeds 30%
        ScaleInCooldown: 120 # Cooldown period in seconds before scaling in
        ScaleOutCooldown: 60 # Cooldown period in seconds before scaling out again

Outputs:
  ALBDNSName:
    Description: The DNS name of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-ALB-DNS"

  VPCId:
    Description: The ID of the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: The public subnets for the ALB
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]

  PrivateSubnets:
    Description: The private subnets for the ASG
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]