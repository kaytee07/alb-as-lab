AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Auto Scaling Lab: Deploys a VPC, ALB, and Auto Scaling Group with Node.js web servers
  in eu-west-1 that scale based on 50% CPU utilization, displaying instance IP and ID.

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Default: ""
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues: [t3.micro, t3.small, t3.medium]
    Description: EC2 instance type
  EnvironmentName:
    Type: String
    Default: AutoScalingLab
    AllowedPattern: ^[a-zA-Z0-9_.]{1,50}$
    ConstraintDescription: Must be 1-50 alphanumeric characters, underscores, or periods (no hyphens or special characters).
    Description: Environment name for tagging (e.g., AutoScalingLab, Prod, Dev)

Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, ""]]

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${Env}-PublicSubnet1
            - { Env: !Ref EnvironmentName }

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${Env}-PublicSubnet2
            - { Env: !Ref EnvironmentName }

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub
            - ${Env}-PrivateSubnet1
            - { Env: !Ref EnvironmentName }

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub
            - ${Env}-PrivateSubnet2
            - { Env: !Ref EnvironmentName }

  # NAT Gateway in Public Subnet 1
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub
            - ${Env}-NAT-EIP1
            - { Env: !Ref EnvironmentName }

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub
            - ${Env}-NATGateway1
            - { Env: !Ref EnvironmentName }

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub
            - ${Env}-PublicRT
            - { Env: !Ref EnvironmentName }

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub
            - ${Env}-PrivateRT1
            - { Env: !Ref EnvironmentName }

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub
            - ${Env}-PrivateRT2
            - { Env: !Ref EnvironmentName }

  # Routes
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  # Route Table Associations
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub
            - ${Env}-ALB-SG
            - { Env: !Ref EnvironmentName }

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web server instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub
            - ${Env}-Instance-SG
            - { Env: !Ref EnvironmentName }

  # IAM Role for EC2 Instances
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EC2DescribeInstances
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub
            - ${Env}-EC2Role
            - { Env: !Ref EnvironmentName }

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  # Application Load Balancer
  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub
        - ${Env}-ALB
        - { Env: !Ref EnvironmentName }
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub
            - ${Env}-ALB
            - { Env: !Ref EnvironmentName }

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub
        - ${Env}-TG
        - { Env: !Ref EnvironmentName }
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: !Sub
            - ${Env}-TG
            - { Env: !Ref EnvironmentName }

  # Launch Template with dynamic AMI lookup
  WebServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub
        - ${Env}-LaunchTemplate
        - { Env: !Ref EnvironmentName }
      LaunchTemplateData:
        ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"
        InstanceType: !Ref InstanceType
        KeyName: !If [HasKeyName, !Ref KeyName, !Ref "AWS::NoValue"]
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        UserData:
                  Fn::Base64: !Sub |
                    #!/bin/bash
                    # Update the system
                    yum update -y
                    
                    # Install Apache and stress
                    yum install -y httpd stress
                    
                    # Start and enable Apache
                    systemctl start httpd
                    systemctl enable httpd
                    
                    # Create a simple web page with instance info and stress test button
                    INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                    PRIVATE_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
                    
                    cat > /var/www/html/index.html << EOF
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>Auto Scaling Lab</title>
                        <style>
                            body { font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }
                            h1 { color: #333; }
                            .info { background-color: #f5f5f5; padding: 20px; border-radius: 5px; display: inline-block; }
                            .stress-btn { 
                                background-color: #ff4757; 
                                color: white; 
                                border: none; 
                                padding: 15px 32px; 
                                text-align: center; 
                                text-decoration: none; 
                                display: inline-block; 
                                font-size: 16px; 
                                margin: 20px 2px; 
                                cursor: pointer; 
                                border-radius: 5px;
                            }
                            .stress-btn:hover { background-color: #ff6b81; }
                        </style>
                    </head>
                    <body>
                        <h1>Auto Scaling Lab</h1>
                        <div class="info">
                            <h2>Hello from $PRIVATE_IP / $INSTANCE_ID</h2>
                            <p>This instance is part of an Auto Scaling Group</p>
                            <button class="stress-btn" onclick="startStressTest()">Stress Test CPU</button>
                            <p id="status"></p>
                        </div>
                        
                        <script>
                            function startStressTest() {
                                document.getElementById('status').innerText = 'Starting CPU stress test for 60 seconds...';
                                
                                // Use fetch API to trigger stress test
                                fetch('/stress', { method: 'POST' })
                                    .then(response => response.text())
                                    .then(data => {
                                        document.getElementById('status').innerText = 'Stress test completed!';
                                    })
                                    .catch(error => {
                                        document.getElementById('status').innerText = 'Error starting stress test: ' + error;
                                    });
                            }
                        </script>
                    </body>
                    </html>
                    EOF
                    
                    # Create a simple stress test script that definitely works
                    cat > /var/www/html/stress.php << 'EOF'
                    <?php
                    header('Content-Type: text/plain');
                    echo "Starting CPU stress test...\n";
                    flush();
                    
                    // Fork a background process to do CPU intensive work
                    $pid = pcntl_fork();
                    if ($pid == 0) {
                        // Child process - do CPU intensive work
                        $end_time = time() + 60; // Run for 60 seconds
                        while (time() < $end_time) {
                            // CPU intensive operations
                            for ($i = 0; $i < 1000000; $i++) {
                                sqrt($i);
                            }
                        }
                        exit(0);
                    }
                    echo "CPU stress test started (PID: $pid)\n";
                    ?>
                    EOF
                    
                    # Install PHP
                    yum install -y php
                    
                    # Create a CGI script to handle stress test
                    mkdir -p /var/www/cgi-bin
                    cat > /var/www/cgi-bin/stress.sh << 'EOF'
                    #!/bin/bash
                    echo "Content-type: text/plain"
                    echo ""
                    echo "Starting CPU stress test for 60 seconds..."
                    
                    # Create CPU load using dd and /dev/zero
                    timeout 60 bash -c '
                        for i in {1..4}; do
                            dd if=/dev/zero of=/dev/null bs=1M &
                        done
                        wait
                    ' &
                    
                    echo "CPU stress test initiated"
                    EOF
                    
                    chmod +x /var/www/cgi-bin/stress.sh
                    
                    # Configure Apache to handle the stress test endpoint
                    cat > /etc/httpd/conf.d/stress.conf << EOF
                    ScriptAlias /stress /var/www/cgi-bin/stress.sh
                    <Directory "/var/www/cgi-bin">
                        AllowOverride None
                        Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
                        Require all granted
                    </Directory>
                    EOF
                    
                    # Restart Apache to apply changes
                    systemctl restart httpd
  # Auto Scaling Group
  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub
        - ${Env}-ASG
        - { Env: !Ref EnvironmentName }
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLaunchTemplate
        Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '4'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub
            - ${Env}-WebServer
            - { Env: !Ref EnvironmentName }
          PropagateAtLaunch: true

  # Scaling Policies
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      Cooldown: 60
      ScalingAdjustment: 1
      Policy