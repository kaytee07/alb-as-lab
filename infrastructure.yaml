AWSTemplateFormatVersion: '2010-09-09'
Description: Auto Scaling Lab with VPC, Apache Web Server and CPU-based scaling

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Default: ""
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues: [t3.micro, t3.small, t3.medium]
    Description: EC2 instance type
  EnvironmentName:
    Type: String
    Default: AutoScalingLab
    Description: Environment name for tagging

Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, ""]]

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet2

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet2

  # NAT Gateway in Public Subnet 1
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-EIP1

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NATGateway1

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicRT

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRT1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRT2

  # Routes
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  # Route Table Associations
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ALB-SG

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web server instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Instance-SG

  # Application Load Balancer
  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-ALB
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ALB

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-TG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-TG

  # Launch Template with dynamic AMI lookup
  WebServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName}-LaunchTemplate
      LaunchTemplateData:
        ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"
        InstanceType: !Ref InstanceType
        KeyName: !If [HasKeyName, !Ref KeyName, !Ref "AWS::NoValue"]
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            # Update system and install Apache
            yum update -y
            yum install -y httpd stress

            # Install PHP for dynamic content (lightweight version)
            yum install -y php

            # Create a PHP script to dynamically generate HTML with environment name
            cat > /var/www/html/index.php << 'EOF'
            <?php
            $environmentName = "${EnvironmentName}";
            ?>
            <!DOCTYPE html>
            <html>
            <head>
                <title>Auto Scaling Lab</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 40px; }
                    .container { max-width: 800px; margin: 0 auto; text-align: center; }
                    .instance-info { background: #f4f4f4; padding: 20px; border-radius: 5px; margin: 20px 0; }
                    .stress-btn { 
                        background: #ff4757; 
                        color: white; 
                        padding: 15px 30px; 
                        border: none; 
                        border-radius: 5px; 
                        cursor: pointer; 
                        font-size: 16px; 
                        margin: 10px; 
                    }
                    .stress-btn:hover { background: #ff6b81; }
                    .info { color: #666; font-size: 14px; margin-top: 20px; }
                    .load-balancer { background: #dfe4ea; padding: 15px; border-radius: 5px; margin: 10px 0; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>Auto Scaling Lab</h1>
                    
                    <div class="load-balancer">
                        <h3>Load Balancer URL available in CloudFormation Outputs</h3>
                    </div>
                    
                    <div class="instance-info">
                        <h2>Hello from <?php echo htmlspecialchars($environmentName); ?></h2>
                        <p><strong>IP Address:</strong> <span id="ip-address">Loading...</span></p>
                        <p><strong>Instance ID:</strong> <span id="instance-id">Loading...</span></p>
                        <p><strong>Availability Zone:</strong> <span id="availability-zone">Loading...</span></p>
                    </div>
                    
                    <button class="stress-btn" onclick="startStressTest()">Stress Test CPU</button>
                    <button class="stress-btn" onclick="stopStressTest()" style="background: #2ed573;">Stop Stress Test</button>
                    
                    <div class="info">
                        <p>Clicking "Stress Test CPU" will simulate high CPU load (80% for 60 seconds)</p>
                        <p>When CPU utilization exceeds 30%, Auto Scaling will launch new instances</p>
                        <p>Refresh the page to see different instances serving requests</p>
                    </div>
                </div>

                <script>
                    // Fetch instance metadata
                    async function fetchInstanceMetadata() {
                        try {
                            const [ipResponse, idResponse, azResponse] = await Promise.all([
                                fetch('http://169.254.169.254/latest/meta-data/local-ipv4'),
                                fetch('http://169.254.169.254/latest/meta-data/instance-id'),
                                fetch('http://169.254.169.254/latest/meta-data/placement/availability-zone')
                            ]);
                            
                            document.getElementById('ip-address').textContent = await ipResponse.text();
                            document.getElementById('instance-id').textContent = await idResponse.text();
                            document.getElementById('availability-zone').textContent = await azResponse.text();
                        } catch (error) {
                            console.error('Error fetching metadata:', error);
                        }
                    }

                    function startStressTest() {
                        fetch('/cgi-bin/stress?action=start')
                            .then(response => response.text())
                            .then(data => alert('Stress test started: ' + data))
                            .catch(error => alert('Error: ' + error));
                    }

                    function stopStressTest() {
                        fetch('/cgi-bin/stress?action=stop')
                            .then(response => response.text())
                            .then(data => alert('Stress test stopped: ' + data))
                            .catch(error => alert('Error: ' + error));
                    }

                    // Load instance metadata when page loads
                    document.addEventListener('DOMContentLoaded', fetchInstanceMetadata);
                </script>
            </body>
            </html>
            EOF

            # Create CGI directory and script
            mkdir -p /var/www/cgi-bin
            cat > /var/www/cgi-bin/stress << 'EOF'
            #!/bin/bash
            echo "Content-type: text/plain"
            echo ""

            # Parse query string
            QUERY_STRING="${!QUERY_STRING:-}"
            ACTION=""

            # Extract action parameter
            if [[ "$QUERY_STRING" == *"action=start"* ]]; then
                ACTION="start"
            elif [[ "$QUERY_STRING" == *"action=stop"* ]]; then
                ACTION="stop"
            fi

            case $ACTION in
                "start")
                    # Start stress test (80% CPU load for 60 seconds)
                    nohup stress --cpu 2 --timeout 60 > /dev/null 2>&1 &
                    echo "Stress test started on $(hostname)"
                    ;;
                "stop")
                    # Stop all stress processes
                    pkill -f stress || true
                    echo "Stress test stopped on $(hostname)"
                    ;;
                *)
                    echo "Invalid action. Use ?action=start or ?action=stop"
                    ;;
            esac
            EOF

            # Set executable permissions
            chmod +x /var/www/cgi-bin/stress

            # Configure Apache for PHP and CGI
            cat > /etc/httpd/conf.d/app.conf << 'EOF'
            # PHP configuration
            <FilesMatch \.php$>
                SetHandler application/x-httpd-php
            </FilesMatch>

            # CGI configuration
            ScriptAlias /cgi-bin/ /var/www/cgi-bin/
            <Directory "/var/www/cgi-bin">
                Options +ExecCGI
                AddHandler cgi-script .cgi .sh .pl .py
                Require all granted
            </Directory>

            # Set index.php as default
            DirectoryIndex index.php index.html
            EOF

            # Enable and start Apache
            systemctl enable httpd
            systemctl start httpd

            # Test the application
            curl -s http://localhost/ | head -5
            curl -s http://localhost/cgi-bin/stress?action=test
  # Auto Scaling Group
  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-ASG
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLaunchTemplate
        Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '4'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebServer
          PropagateAtLaunch: true

  # Scaling Policies
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      Cooldown: 60
      ScalingAdjustment: 1
      PolicyType: SimpleScaling

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -1
      PolicyType: SimpleScaling

  # CloudWatch Alarms
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm when CPU exceeds 30%
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerAutoScalingGroup
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 30
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy

  LowCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm when CPU is below 10%
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerAutoScalingGroup
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref ScaleDownPolicy

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCId

  LoadBalancerDNS:
    Description: DNS name of the Load Balancer
    Value: !GetAtt WebAppLoadBalancer.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-LoadBalancerDNS

  AutoScalingGroupName:
    Description: Name of the Auto Scaling Group
    Value: !Ref WebServerAutoScalingGroup
    Export:
      Name: !Sub ${EnvironmentName}-ASGName

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PublicSubnet1Id

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PublicSubnet2Id

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PrivateSubnet1Id

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PrivateSubnet2Id

  LaunchTemplateName:
    Description: Name of the Launch Template
    Value: !Ref WebServerLaunchTemplate
    Export:
      Name: !Sub ${EnvironmentName}-LaunchTemplateName