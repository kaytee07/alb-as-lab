AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Auto Scaling Lab: Deploys a VPC, ALB, and Auto Scaling Group with Apache web servers
  in eu-west-1 that scale based on 50% CPU utilization, displaying instance IP and ID.

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Default: ""
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues: [t3.micro, t3.small, t3.medium]
    Description: EC2 instance type
  EnvironmentName:
    Type: String
    Default: AutoScalingLab
    Description: Environment name for tagging

Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, ""]]

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet2

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet2

  # NAT Gateway in Public Subnet 1
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-EIP1

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NATGateway1

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicRT

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRT1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRT2

  # Routes
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  # Route Table Associations
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ALB-SG

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web server instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Instance-SG

  # Application Load Balancer
  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-ALB
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ALB

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-TG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-TG

  # Launch Template with dynamic AMI lookup
WebServerLaunchTemplate:
  Type: AWS::EC2::LaunchTemplate
  Properties:
    LaunchTemplateName: !Sub
      - ${EnvName}-LaunchTemplate
      - { EnvName: !Ref EnvironmentName }
    LaunchTemplateData:
      ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref "AWS::NoValue"]
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub
          - |
              #!/bin/bash -xe
              # Redirect logs to /var/log/app.log for debugging
              exec > >(tee /var/log/app.log | logger -t user-data -s 2>/dev/null) 2>&1

              # Install Node.js (LTS version)
              curl -fsSL https://rpm.nodesource.com/setup_20.x | bash -
              yum install -y nodejs || { echo "Failed to install Node.js"; exit 1; }

              # Create application directory
              mkdir -p /app && cd /app

              # Initialize Node.js project
              npm init -y || { echo "Failed to initialize npm project"; exit 1; }
              npm install express @aws-sdk/client-ec2 || { echo "Failed to install npm packages"; exit 1; }

              # Create the main application file (server.js)
              cat > /app/server.js << 'EOF'
              const express = require('express');
              const { EC2Client, DescribeInstancesCommand } = require('@aws-sdk/client-ec2');
              const os = require('os');
              const app = express();
              const port = 80;

              // AWS SDK client for fetching metadata
              const ec2Client = new EC2Client({ region: process.env.AWS_REGION || 'us-east-1' });

              // Serve static files (e.g., CSS, JS)
              app.use(express.static('public'));

              // Root endpoint to serve the HTML page
              app.get('/', async (req, res) => {
                try {
                  // Fetch instance metadata
                  const instanceId = await fetchMetadata('instance-id');
                  const data = await ec2Client.send(new DescribeInstancesCommand({
                    InstanceIds: [instanceId]
                  }));
                  const instance = data.Reservations[0].Instances[0];
                  const ip = instance.PrivateIpAddress || 'Unknown IP';
                  const instanceIdDisplay = instance.InstanceId || 'Unknown Instance ID';
                  const az = instance.Placement.AvailabilityZone || 'Unknown AZ';
                  const environmentName = "${EnvName}";

                  // HTML content with Tailwind CSS
                  res.send(`
                    <!DOCTYPE html>
                    <html lang="en">
                    <head>
                      <meta charset="UTF-8">
                      <meta name="viewport" content="width=device-width, initial-scale=1.0">
                      <title>Auto Scaling Lab</title>
                      <script src="https://cdn.tailwindcss.com"></script>
                    </head>
                    <body class="bg-gray-100 font-sans">
                      <div class="container mx-auto p-6 text-center">
                        <h1 class="text-3xl font-bold mb-4">Auto Scaling Lab</h1>
                        <div class="bg-blue-100 p-4 rounded-lg mb-4">
                          <h3 class="text-lg font-semibold">Load Balancer URL available in CloudFormation Outputs</h3>
                        </div>
                        <div class="bg-white p-6 rounded-lg shadow-md mb-4">
                          <h2 class="text-2xl font-semibold">Hello from ${ip} / ${instanceIdDisplay}</h2>
                          <p class="text-gray-600"><strong>Availability Zone:</strong> ${az}</p>
                          <p class="text-gray-600"><strong>Environment:</strong> ${environmentName}</p>
                        </div>
                        <div class="flex justify-center gap-4">
                          <button onclick="startStressTest()" class="bg-red-500 hover:bg-red-600 text-white px-6 py-3 rounded-lg">Stress Test CPU</button>
                          <button onclick="stopStressTest()" class="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-lg">Stop Stress Test</button>
                        </div>
                        <div class="text-gray-500 mt-4">
                          <p>Click "Stress Test CPU" to simulate high CPU load (80% for 60 seconds).</p>
                          <p>When CPU utilization exceeds 50%, Auto Scaling will launch new instances.</p>
                          <p>Refresh the page to see different instances serving requests.</p>
                        </div>
                      </div>
                      <script>
                        async function startStressTest() {
                          try {
                            const response = await fetch('/stress?action=start');
                            if (!response.ok) throw new Error('HTTP error ' + response.status);
                            const data = await response.text();
                            alert('Stress test started: ' + data);
                          } catch (error) {
                            alert('Error starting stress test: ' + error.message);
                          }
                        }
                        async function stopStressTest() {
                          try {
                            const response = await fetch('/stress?action=stop');
                            if (!response.ok) throw new Error('HTTP error ' + response.status);
                            const data = await response.text();
                            alert('Stress test stopped: ' + data);
                          } catch (error) {
                            alert('Error stopping stress test: ' + error.message);
                          }
                        }
                      </script>
                    </body>
                    </html>
                  `);
                } catch (error) {
                  res.status(500).send('Error fetching instance metadata: ' + error.message);
                }
              });

              // Stress test endpoint
              let stressInterval = null;
              app.get('/stress', (req, res) => {
                const action = req.query.action;
                if (action === 'start') {
                  if (!stressInterval) {
                    stressInterval = setInterval(() => {
                      let start = Date.now();
                      while (Date.now() - start < 1000) {
                        Math.sqrt(Math.random() * Math.random());
                      }
                    }, 1000);
                    setTimeout(() => clearInterval(stressInterval), 60000); // Stop after 60 seconds
                    res.send(`Stress test started on ${os.hostname()}`);
                  } else {
                    res.send(`Stress test already running on ${os.hostname()}`);
                  }
                } else if (action === 'stop') {
                  if (stressInterval) {
                    clearInterval(stressInterval);
                    stressInterval = null;
                    res.send(`Stress test stopped on ${os.hostname()}`);
                  } else {
                    res.send(`No stress test running on ${os.hostname()}`);
                  }
                } else {
                  res.status(400).send('Invalid action. Use ?action=start or ?action=stop');
                }
              });

              // Helper function to fetch metadata
              async function fetchMetadata(key) {
                const response = await fetch(`http://169.254.169.254/latest/meta-data/${key}`);
                return response.text();
              }

              // Start the server
              app.listen(port, () => {
                console.log(`Server running on port ${port}`);
              });
              EOF

              # Create public directory for static assets
              mkdir -p /app/public

              # Set permissions
              chown -R ec2-user:ec2-user /app || { echo "Failed to set ownership"; exit 1; }
              chmod -R 755 /app || { echo "Failed to set permissions"; exit 1; }

              # Install PM2 to manage the Node.js process
              npm install -g pm2 || { echo "Failed to install PM2"; exit 1; }
              pm2 start /app/server.js --name web-app || { echo "Failed to start application"; exit 1; }
              pm2 startup systemd || { echo "Failed to set up PM2 startup"; exit 1; }
              pm2 save || { echo "Failed to save PM2 process"; exit 1; }

              # Test the application
              curl -s http://localhost/ | grep -q "Hello from" || { echo "Failed to test application"; exit 1; }
              curl -s http://localhost/stress?action=test | grep -q "Invalid action" || { echo "Failed to test stress endpoint"; exit 1; }
          - { EnvName: !Ref EnvironmentName }

  # Auto Scaling Group
  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-ASG
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLaunchTemplate
        Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '4'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebServer
          PropagateAtLaunch: true

  # Scaling Policies
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      Cooldown: 60
      ScalingAdjustment: 1
      PolicyType: SimpleScaling

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -1
      PolicyType: SimpleScaling

  # CloudWatch Alarms
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm when CPU exceeds 50%
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerAutoScalingGroup
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy

  LowCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm when CPU is below 10%
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerAutoScalingGroup
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref ScaleDownPolicy

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCId

  LoadBalancerDNS:
    Description: DNS name of the Load Balancer
    Value: !GetAtt WebAppLoadBalancer.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-LoadBalancerDNS

  AutoScalingGroupName:
    Description: Name of the Auto Scaling Group
    Value: !Ref WebServerAutoScalingGroup
    Export:
      Name: !Sub ${EnvironmentName}-ASGName

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PublicSubnet1Id

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PublicSubnet2Id

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PrivateSubnet1Id

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PrivateSubnet2Id

  LaunchTemplateName:
    Description: Name of the Launch Template
    Value: !Ref WebServerLaunchTemplate
    Export:
      Name: !Sub ${EnvironmentName}-LaunchTemplateName
