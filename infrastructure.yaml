AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Auto Scaling Lab: Deploys a VPC, ALB, and Auto Scaling Group with Apache web servers
  in eu-west-1 that scale based on 50% CPU utilization, displaying instance IP and ID.

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Default: ""
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues: [t3.micro, t3.small, t3.medium]
    Description: EC2 instance type
  EnvironmentName:
    Type: String
    Default: AutoScalingLab
    Description: Environment name for tagging

Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, ""]]

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet2

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet2

  # NAT Gateway in Public Subnet 1
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-EIP1

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NATGateway1

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicRT

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRT1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRT2

  # Routes
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  # Route Table Associations
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ALB-SG

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web server instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Instance-SG

  # Application Load Balancer
  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-ALB
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ALB

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-TG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-TG

  # Launch Template with dynamic AMI lookup
  WebServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub
        - ${Env}-LaunchTemplate
        - { Env: !Ref EnvironmentName }
      LaunchTemplateData:
        ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"
        InstanceType: !Ref InstanceType
        KeyName: !If [HasKeyName, !Ref KeyName, !Ref "AWS::NoValue"]
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub
            - |
                #!/bin/bash -xe
                # Redirect logs to /var/log/app.log
                exec > >(tee /var/log/app.log | logger -t user-data -s 2>/dev/null) 2>&1

                # Install Node.js (LTS)
                curl -fsSL https://rpm.nodesource.com/setup_20.x | bash -
                yum install -y nodejs || { echo "Failed to install Node.js"; exit 1; }

                # Create application directory
                mkdir -p /app && cd /app

                # Initialize Node.js project
                npm init -y || { echo "Failed to initialize npm project"; exit 1; }
                # include node-fetch@2 for IMDSv2 support
                npm install express @aws-sdk/client-ec2 node-fetch@2 || { echo "Failed to install npm packages"; exit 1; }

                # Create server.js
                cat > /app/server.js << 'EOF'
                const express = require('express');
                const { EC2Client, DescribeInstancesCommand } = require('@aws-sdk/client-ec2');
                const fetch = require('node-fetch'); // node-fetch v2 (commonjs)
                const os = require('os');
                const app = express();
                const port = 80;

                const ec2Client = new EC2Client({ region: process.env.AWS_REGION || 'us-east-1' });
                app.use(express.static('public'));

                // IMDSv2-safe metadata fetch
                async function fetchMetadata(key) {
                  try {
                    const tokenResp = await fetch('http://169.254.169.254/latest/api/token', {
                      method: 'PUT',
                      headers: { 'X-aws-ec2-metadata-token-ttl-seconds': '21600' }
                    });
                    if (!tokenResp.ok) throw new Error('Failed to fetch IMDSv2 token');
                    const token = await tokenResp.text();

                    const resp = await fetch('http://169.254.169.254/latest/meta-data/' + key, {
                      headers: { 'X-aws-ec2-metadata-token': token }
                    });
                    if (!resp.ok) throw new Error('Failed to fetch metadata key: ' + key);
                    const text = await resp.text();
                    return text.trim();
                  } catch (err) {
                    console.error('Metadata fetch error:', err);
                    throw err;
                  }
                }

                app.get('/', async (req, res) => {
                  try {
                    const instanceId = await fetchMetadata('instance-id');
                    const data = await ec2Client.send(new DescribeInstancesCommand({
                      InstanceIds: [instanceId]
                    }));
                    const instance = data.Reservations[0].Instances[0] || {};
                    const ip = instance.PrivateIpAddress || 'Unknown IP';
                    const instanceIdDisplay = instance.InstanceId || 'Unknown Instance ID';
                    const az = (instance.Placement && instance.Placement.AvailabilityZone) ? instance.Placement.AvailabilityZone : 'Unknown AZ';
                    const environmentName = "${Env}" || 'Unknown Environment';

                    // Build HTML with concatenation to avoid ${...} sequences
                    let html = '';
                    html += '<!DOCTYPE html><html lang="en"><head>';
                    html += '<meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0">';
                    html += '<title>Auto Scaling Lab</title><script src="https://cdn.tailwindcss.com"></script></head>';
                    html += '<body class="bg-gray-100 font-sans"><div class="container mx-auto p-6 text-center">';
                    html += '<h1 class="text-3xl font-bold mb-4">Auto Scaling Lab</h1>';
                    html += '<div class="bg-blue-100 p-4 rounded-lg mb-4"><h3 class="text-lg font-semibold">Load Balancer URL in CloudFormation Outputs</h3></div>';
                    html += '<div class="bg-white p-6 rounded-lg shadow-md mb-4">';
                    html += '<h2 class="text-2xl font-semibold">Hello from ' + ip + ' / ' + instanceIdDisplay + '</h2>';
                    html += '<p class="text-gray-600"><strong>Availability Zone:</strong> ' + az + '</p>';
                    html += '<p class="text-gray-600"><strong>Environment:</strong> ' + environmentName + '</p>';
                    html += '</div>';
                    html += '<div class="flex justify-center gap-4">';
                    html += '<button onclick="startStressTest()" class="bg-red-500 hover:bg-red-600 text-white px-6 py-3 rounded-lg">Stress Test CPU</button>';
                    html += '<button onclick="stopStressTest()" class="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-lg">Stop Stress Test</button>';
                    html += '</div>';
                    html += '<div class="text-gray-500 mt-4">';
                    html += '<p>Click "Stress Test CPU" to simulate high CPU load (80% for 60 seconds).</p>';
                    html += '<p>CPU utilization &gt;50% triggers Auto Scaling.</p>';
                    html += '<p>Refresh to see different instances.</p>';
                    html += '</div></div>';

                    // Add client-side JS (keeps no ${...} tokens)
                    html += '<script>';
                    html += 'async function startStressTest(){try{const r=await fetch("/stress?action=start");if(!r.ok)throw new Error("HTTP error "+r.status);const d=await r.text();alert("Stress test started: "+d);}catch(e){alert("Error starting stress test: "+e.message);}}';
                    html += 'async function stopStressTest(){try{const r=await fetch("/stress?action=stop");if(!r.ok)throw new Error("HTTP error "+r.status);const d=await r.text();alert("Stress test stopped: "+d);}catch(e){alert("Error stopping stress test: "+e.message);}}';
                    html += '</script></body></html>';

                    res.send(html);
                  } catch (error) {
                    res.status(500).send('Error fetching metadata: ' + (error && error.message ? error.message : error));
                  }
                });

                let stressInterval = null;
                app.get('/stress', (req, res) => {
                  const action = req.query.action;
                  if (action === 'start') {
                    if (!stressInterval) {
                      stressInterval = setInterval(() => {
                        let start = Date.now();
                        while (Date.now() - start < 1000) {
                          Math.sqrt(Math.random() * Math.random());
                        }
                      }, 1000);
                      setTimeout(() => clearInterval(stressInterval), 60000);
                      res.send('Stress test started on ' + os.hostname());
                    } else {
                      res.send('Stress test already running on ' + os.hostname());
                    }
                  } else if (action === 'stop') {
                    if (stressInterval) {
                      clearInterval(stressInterval);
                      stressInterval = null;
                      res.send('Stress test stopped on ' + os.hostname());
                    } else {
                      res.send('No stress test running on ' + os.hostname());
                    }
                  } else {
                    res.status(400).send('Invalid action. Use ?action=start or ?action=stop');
                  }
                });

                app.listen(port, () => {
                  console.log('Server running on port ' + port);
                });
                EOF

                # Create public directory
                mkdir -p /app/public

                # Set permissions
                chown -R ec2-user:ec2-user /app || { echo "Failed to set ownership"; exit 1; }
                chmod -R 755 /app || { echo "Failed to set permissions"; exit 1; }

                # Install and start PM2
                npm install -g pm2 || { echo "Failed to install PM2"; exit 1; }
                pm2 start /app/server.js --name web-app || { echo "Failed to start application"; exit 1; }
                pm2 startup systemd || { echo "Failed to set up PM2 startup"; exit 1; }
                pm2 save || { echo "Failed to save PM2 process"; exit 1; }

                # Test the application
                sleep 3
                curl -s http://localhost/ | grep -q "Hello from" || { echo "Failed to test application"; exit 1; }
                curl -s "http://localhost/stress?action=test" | grep -q "Invalid action" || { echo "Failed to test stress endpoint"; exit 1; }
            - { Env: !Ref EnvironmentName }


  # Auto Scaling Group
  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-ASG
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLaunchTemplate
        Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '4'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebServer
          PropagateAtLaunch: true

  # Scaling Policies
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      Cooldown: 60
      ScalingAdjustment: 1
      PolicyType: SimpleScaling

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -1
      PolicyType: SimpleScaling

  # CloudWatch Alarms
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm when CPU exceeds 50%
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerAutoScalingGroup
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy

  LowCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm when CPU is below 10%
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerAutoScalingGroup
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref ScaleDownPolicy

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCId

  LoadBalancerDNS:
    Description: DNS name of the Load Balancer
    Value: !GetAtt WebAppLoadBalancer.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-LoadBalancerDNS

  AutoScalingGroupName:
    Description: Name of the Auto Scaling Group
    Value: !Ref WebServerAutoScalingGroup
    Export:
      Name: !Sub ${EnvironmentName}-ASGName

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PublicSubnet1Id

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PublicSubnet2Id

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PrivateSubnet1Id

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PrivateSubnet2Id

  LaunchTemplateName:
    Description: Name of the Launch Template
    Value: !Ref WebServerLaunchTemplate
    Export:
      Name: !Sub ${EnvironmentName}-LaunchTemplateName
