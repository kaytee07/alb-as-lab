AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Auto Scaling Lab: Deploys a VPC, ALB, and Auto Scaling Group with Apache web servers
  in eu-west-1 that scale based on 50% CPU utilization, displaying instance IP and ID.

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Default: ""
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues: [t3.micro, t3.small, t3.medium]
    Description: EC2 instance type
  EnvironmentName:
    Type: String
    Default: AutoScalingLab
    Description: Environment name for tagging

Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, ""]]

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet2

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet2

  # NAT Gateway in Public Subnet 1
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-EIP1

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NATGateway1

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicRT

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRT1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRT2

  # Routes
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  # Route Table Associations
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ALB-SG

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web server instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Instance-SG

  # Application Load Balancer
  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-ALB
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ALB

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-TG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-TG

  # Launch Template with dynamic AMI lookup
WebServerLaunchTemplate:
  Type: AWS::EC2::LaunchTemplate
  Properties:
    LaunchTemplateName: !Sub ${EnvironmentName}-LaunchTemplate
    LaunchTemplateData:
      ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref "AWS::NoValue"]
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Log output to /var/log/user-data.log for debugging
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/null) 2>&1

          # Install required packages
          yum update -y || { echo "Failed to update packages"; exit 1; }
          yum install -y httpd php stress || { echo "Failed to install httpd, php, or stress"; exit 1; }

          # Enable and start Apache
          systemctl enable httpd || { echo "Failed to enable httpd"; exit 1; }
          systemctl start httpd || { echo "Failed to start httpd"; exit 1; }

          # Create index.php with server-side metadata fetching
          cat > /var/www/html/index.php << 'EOF'
          <?php
          // Fetch instance metadata
          $ip = @file_get_contents('http://169.254.169.254/latest/meta-data/local-ipv4') ?: 'Unknown IP';
          $instance_id = @file_get_contents('http://169.254.169.254/latest/meta-data/instance-id') ?: 'Unknown Instance ID';
          $az = @file_get_contents('http://169.254.169.254/latest/meta-data/placement/availability-zone') ?: 'Unknown AZ';
          $environment_name = "${EnvironmentName}";
          ?>
          <!DOCTYPE html>
          <html>
          <head>
              <title>Auto Scaling Lab</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .container { max-width: 800px; margin: 0 auto; text-align: center; }
                  .instance-info { background: #f4f4f4; padding: 20px; border-radius: 5px; margin: 20px 0; }
                  .stress-btn { 
                      background: #ff4757; 
                      color: white; 
                      padding: 15px 30px; 
                      border: none; 
                      border-radius: 5px; 
                      cursor: pointer; 
                      font-size: 16px; 
                      margin: 10px; 
                  }
                  .stress-btn:hover { background: #ff6b81; }
                  .stop-btn { background: #2ed573; }
                  .stop-btn:hover { background: #38e07d; }
                  .info { color: #666; font-size: 14px; margin-top: 20px; }
                  .load-balancer { background: #dfe4ea; padding: 15px; border-radius: 5px; margin: 10px 0; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>Auto Scaling Lab</h1>
                  <div class="load-balancer">
                      <h3>Load Balancer URL available in CloudFormation Outputs</h3>
                  </div>
                  <div class="instance-info">
                      <h2>Hello from <?php echo htmlspecialchars($ip . ' / ' . $instance_id); ?></h2>
                      <p><strong>Availability Zone:</strong> <?php echo htmlspecialchars($az); ?></p>
                  </div>
                  <button class="stress-btn" onclick="startStressTest()">Stress Test CPU</button>
                  <button class="stress-btn stop-btn" onclick="stopStressTest()">Stop Stress Test</button>
                  <div class="info">
                      <p>Clicking "Stress Test CPU" will simulate high CPU load (80% for 60 seconds)</p>
                      <p>When CPU utilization exceeds 50%, Auto Scaling will launch new instances</p>
                      <p>Refresh the page to see different instances serving requests</p>
                  </div>
              </div>
              <script>
                  function startStressTest() {
                      fetch('/stress.php?action=start')
                          .then(response => {
                              if (!response.ok) throw new Error('HTTP error ' + response.status);
                              return response.text();
                          })
                          .then(data => alert('Stress test started: ' + data))
                          .catch(error => alert('Error starting stress test: ' + error.message));
                  }
                  function stopStressTest() {
                      fetch('/stress.php?action=stop')
                          .then(response => {
                              if (!response.ok) throw new Error('HTTP error ' + response.status);
                              return response.text();
                          })
                          .then(data => alert('Stress test stopped: ' + data))
                          .catch(error => alert('Error stopping stress test: ' + error.message));
                  }
              </script>
          </body>
          </html>
          EOF

          # Create stress.php for handling stress test actions
          cat > /var/www/html/stress.php << 'EOF'
          <?php
          header('Content-Type: text/plain');
          $action = isset($_GET['action']) ? $_GET['action'] : '';

          if ($action === 'start') {
              // Start stress test (80% CPU load for 60 seconds)
              $output = shell_exec('nohup stress --cpu 2 --timeout 60 > /dev/null 2>&1 &');
              echo "Stress test started on " . gethostname();
          } elseif ($action === 'stop') {
              // Stop all stress processes
              $output = shell_exec('pkill -f stress || true');
              echo "Stress test stopped on " . gethostname();
          } else {
              http_response_code(400);
              echo "Invalid action. Use ?action=start or ?action=stop";
          }
          ?>
          EOF

          # Set permissions for web content
          chown -R apache:apache /var/www/html || { echo "Failed to set ownership"; exit 1; }
          find /var/www/html -type d -exec chmod 755 {} \; || { echo "Failed to set directory permissions"; exit 1; }
          find /var/www/html -type f -exec chmod 644 {} \; || { echo "Failed to set file permissions"; exit 1; }

          # Configure Apache for PHP
          cat > /etc/httpd/conf.d/app.conf << 'EOF'
          <FilesMatch \.php$>
              SetHandler application/x-httpd-php
          </FilesMatch>
          DirectoryIndex index.php index.html
          EOF

          # Restart Apache
          systemctl restart httpd || { echo "Failed to restart httpd"; exit 1; }

          # Test the application
          curl -s http://localhost/ | grep -q "Hello from" || { echo "Failed to test application"; exit 1; }
          curl -s http://localhost/stress.php?action=test | grep -q "Invalid action" || { echo "Failed to test stress.php"; exit 1; }

  # Auto Scaling Group
  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-ASG
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLaunchTemplate
        Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '4'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebServer
          PropagateAtLaunch: true

  # Scaling Policies
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      Cooldown: 60
      ScalingAdjustment: 1
      PolicyType: SimpleScaling

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -1
      PolicyType: SimpleScaling

  # CloudWatch Alarms
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm when CPU exceeds 50%
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerAutoScalingGroup
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy

  LowCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm when CPU is below 10%
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerAutoScalingGroup
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref ScaleDownPolicy

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCId

  LoadBalancerDNS:
    Description: DNS name of the Load Balancer
    Value: !GetAtt WebAppLoadBalancer.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-LoadBalancerDNS

  AutoScalingGroupName:
    Description: Name of the Auto Scaling Group
    Value: !Ref WebServerAutoScalingGroup
    Export:
      Name: !Sub ${EnvironmentName}-ASGName

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PublicSubnet1Id

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PublicSubnet2Id

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PrivateSubnet1Id

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PrivateSubnet2Id

  LaunchTemplateName:
    Description: Name of the Launch Template
    Value: !Ref WebServerLaunchTemplate
    Export:
      Name: !Sub ${EnvironmentName}-LaunchTemplateName
